{# templates/lot/show.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}{{ (lot.titre|default(lot.Lot|default('Produit'))) }} — Vestige d’Or{% endblock %}

{% block body %}
{# Fil d’Ariane B&W #}
<div class="text-center mb-6">
  <div class="text-xs text-neutral-500 flex items-center justify-center gap-2">
    <a class="hover:text-black" href="{{ path('app_home') }}">Accueil</a>
    <span class="inline-block h-1 w-1 rounded-full bg-amber-600/60"></span>
    <a class="hover:text-black" href="{{ path('app_lot_index') }}">Tous les lots</a>
  </div>
  <h2 class="mt-2 text-3xl md:text-4xl font-['Playfair Display'] font-semibold tracking-wide inline-block">
    {{ lot.titre|default(lot.Lot|default('Lot #' ~ lot.id)) }}
    <span class="block mx-auto mt-2 h-[2px] w-16 bg-amber-600/70"></span>
  </h2>
  {% if lot.categorie is defined or lot.Categorie is defined %}
    <div class="mt-3 flex items-center justify-center">
      <span class="inline-flex items-center rounded-full border border-neutral-300 px-2.5 py-1 text-xs uppercase tracking-wide text-neutral-600">
        {{ lot.categorie|default(lot.Categorie) }}
      </span>
    </div>
  {% endif %}
</div>

{# --------- CARROUSEL “MASONRY” (images de tailles différentes) --------- #}
{% set _imgs = [] %}
{% if images is defined and images|length %}{% set _imgs = images %}{% endif %}
{% if _imgs is empty and (lot.imageFilename ?? false) %}{% set _imgs = ['uploads/' ~ lot.imageFilename] %}{% endif %}
{% if _imgs is empty and (lot.imageUrl ?? false) %}{% set _imgs = [lot.imageUrl] %}{% endif %}
{% if _imgs is empty %}{% set _imgs = ['images/placeholder.jpg'] %}{% endif %}

<section id="lot-carousel" class="relative">
  <div class="overflow-hidden rounded-2xl border border-neutral-200 bg-white">
    <div class="flex transition-transform duration-500 will-change-transform" data-slides>
      {# On crée des “slides” de 6 images #}
      {% for group in _imgs|batch(6, fill_with=null) %}
        <div class="w-full shrink-0 p-2">
          <div class="grid grid-cols-6 gap-2 auto-rows-[8rem] md:auto-rows-[10rem]">
            {% for img in group if img is not null %}
              {% set src = img starts with 'http' ? img : asset(img) %}
              {% set cls = [
                loop.index == 1 ? 'col-span-3 row-span-2' : '',
                loop.index == 2 ? 'col-span-3 row-span-1' : '',
                loop.index in [3,4] ? 'col-span-2 row-span-1' : '',
                loop.index in [5,6] ? 'col-span-3 row-span-1 md:col-span-2' : ''
              ]|join(' ') %}
              <a href="{{ src }}" target="_blank" rel="noopener"
                 class="group relative block {{ cls }} overflow-hidden rounded-xl border border-neutral-200">
                <img src="{{ src }}" alt="Photo {{ loop.parent.loop.index }}-{{ loop.index }}"
                     class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-[1.03]">
              </a>
            {% endfor %}
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  {# Flèches #}
  <button type="button" class="absolute left-3 top-1/2 -translate-y-1/2
          bg-white border border-neutral-300 text-black rounded-full p-2 shadow hover:border-amber-600 hover:text-amber-700" aria-label="Précédent" data-prev>‹</button>
  <button type="button" class="absolute right-3 top-1/2 -translate-y-1/2
          bg-white border border-neutral-300 text-black rounded-full p-2 shadow hover:border-amber-600 hover:text-amber-700" aria-label="Suivant" data-next>›</button>

  {# Points #}
  <div class="mt-3 flex items-center justify-center gap-2" data-dots>
    {% set slidesCount = (_imgs|length / 6)|round(0, 'ceil') %}
    {% for i in 1..(slidesCount > 0 ? slidesCount : 1) %}
      <button type="button" class="w-2.5 h-2.5 rounded-full bg-neutral-300" aria-label="Slide {{ i }}"></button>
    {% endfor %}
  </div>
</section>

{# --------- DÉTAILS (B&W) --------- #}
<div class="mt-10 grid lg:grid-cols-2 gap-8 items-start">
  <div class="order-2 lg:order-1 space-y-6">
    <div class="rounded-xl border border-neutral-200 bg-white p-6 space-y-4">
      <div class="flex items-center justify-between">
        <span class="text-neutral-500">Prix actuel</span>
        {% set _price = (lot.prixActuel|default(lot.Paiement|default(0))) %}
        <span class="text-2xl font-bold">{{ _price|number_format(2, ',', ' ') }} €</span>
      </div>
      <div class="pt-2 flex flex-col sm:flex-row gap-3">
        <a href="#" class="flex-1 inline-flex items-center justify-center rounded-lg bg-black text-white px-4 py-2.5 hover:bg-neutral-900">
          Enchérir maintenant
        </a>
        <button class="inline-flex items-center justify-center rounded-lg border border-neutral-300 px-3 py-2.5 text-black hover:border-amber-600 hover:text-amber-700" aria-label="Ajouter aux favoris">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="h-5 w-5">
            <path d="M4.318 6.318a4.5 4.5 0 0 1 6.364 0L12 7.636l1.318-1.318a4.5 4.5 0 1 1 6.364 6.364L12 20.364l-7.682-7.682a4.5 4.5 0 0 1 0-6.364z"/>
          </svg>
        </button>
      </div>
    </div>

    <div class="rounded-xl border border-neutral-200 bg-white p-6 space-y-4">
      <h3 class="font-medium inline-block">Informations complémentaires
        <span class="block mt-1 h-[2px] w-10 bg-amber-600/60"></span>
      </h3>
      <dl class="grid grid-cols-1 gap-x-6 gap-y-3 sm:grid-cols-2 text-sm">
        {% if lot.vendeur is defined and lot.vendeur %}
          <div class="sm:col-span-2">
            <dt class="text-neutral-500">Vendeur</dt>
            <dd class="mt-1"><a href="#" class="underline hover:text-black">{{ lot.vendeur }}</a></dd>
          </div>
        {% endif %}
        {% if lot.epoque is defined and lot.epoque %}<div><dt class="text-neutral-500">Époque</dt><dd class="mt-1">{{ lot.epoque }}</dd></div>{% endif %}
        {% if lot.style  is defined and lot.style  %}<div><dt class="text-neutral-500">Style</dt><dd class="mt-1">{{ lot.style }}</dd></div>{% endif %}
        {% if lot.etat   is defined and lot.etat   %}<div><dt class="text-neutral-500">État</dt><dd class="mt-1">{{ lot.etat }}</dd></div>{% endif %}
        {% if lot.materiaux is defined and lot.materiaux %}<div><dt class="text-neutral-500">Matériaux</dt><dd class="mt-1">{{ lot.materiaux }}</dd></div>{% endif %}
        {% if lot.dimensions is defined and lot.dimensions %}
          <div><dt class="text-neutral-500">Dimensions</dt><dd class="mt-1">{{ lot.dimensions }}</dd></div>
        {% endif %}
      </dl>
    </div>
  </div>

  <div class="order-1 lg:order-2">
    <div class="rounded-xl border border-neutral-200 bg-white p-6">
      <h3 class="text-lg font-semibold inline-block">À propos de ce lot
        <span class="block mt-1 h-[2px] w-10 bg-amber-600/60"></span>
      </h3>
      <div class="mt-3 prose max-w-none prose-headings:font-semibold prose-p:text-neutral-700">
        {{ lot.description|default('<p class="text-neutral-500 italic">Aucune description disponible.</p>')|raw }}
      </div>
    </div>
  </div>
</div>

{# --------- PETIT CARROUSEL (compact, images tailles différentes) --------- #}
<div class="mt-10">
  <h3 class="text-lg font-semibold mb-3">Aperçu en images</h3>
  {% include '_components/carousel_masonry.html.twig' with {
    id: 'mini-carousel',
    images: _imgs,
    batch: 4,
    autoplay: true,
    interval: 3500,
    pauseOnHover: true
  } %}
  <p class="mt-2 text-xs text-neutral-500">Faites défiler pour voir d’autres vues.</p>
  <hr class="mt-6 border-neutral-200" />
  </div>

{# --------- JS du carrousel --------- #}
{% endblock %}

<script {% if attribute(_context, 'turbo') is defined %}data-turbo-eval="true"{% endif %}>
(function () {
  function initCarousel() {
    const root  = document.getElementById('lot-carousel');
    if (!root) return;
    const track = root.querySelector('[data-slides]');
    const slides = Array.from(track?.children || []);
    const prev  = root.querySelector('[data-prev]');
    const next  = root.querySelector('[data-next]');
    const dots  = Array.from(root.querySelectorAll('[data-dots] button'));
    const viewport = root.querySelector('.overflow-hidden'); // le cadre visible
    if (!track || slides.length === 0 || !viewport) return;

    let index = 0;
    let timerId = null;
    const intervalMs = 4000;

    function translate() {
      const slideWidth = viewport.clientWidth; // calcul en pixels = fiable
      track.style.transform = 'translateX(' + (-index * slideWidth) + 'px)';
    }

    function updateUI() {
      dots.forEach((d, i) => {
        d.classList.toggle('bg-black', i === index);
        d.classList.toggle('bg-neutral-300', i !== index);
      });
    }

    function go(i) {
      index = (i + slides.length) % slides.length;
      translate();
      updateUI();
    }

    // Events
    function restartAutoplay() {
      stopAutoplay();
      startAutoplay();
    }
    prev && prev.addEventListener('click', () => { go(index - 1); restartAutoplay(); });
    next && next.addEventListener('click', () => { go(index + 1); restartAutoplay(); });
    dots.forEach((d, i) => d.addEventListener('click', () => { go(i); restartAutoplay(); }));

    // Swipe mobile (petit bonus)
    let startX = null;
    viewport.addEventListener('touchstart', (e) => (startX = e.touches[0].clientX), {passive:true});
    viewport.addEventListener('touchend', (e) => {
      if (startX === null) return;
      const dx = e.changedTouches[0].clientX - startX;
      if (Math.abs(dx) > 40) go(index + (dx > 0 ? -1 : 1));
      startX = null;
    });

    // Sur resize, on recalcule la position en px
    window.addEventListener('resize', translate);

    // Autoplay
    function startAutoplay() {
      if (timerId) return;
      timerId = setInterval(() => {
        go(index + 1);
      }, intervalMs);
    }
    function stopAutoplay() {
      if (!timerId) return;
      clearInterval(timerId);
      timerId = null;
    }
    root.addEventListener('mouseenter', stopAutoplay);
    root.addEventListener('mouseleave', startAutoplay);
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) stopAutoplay(); else startAutoplay();
    });

    // Init
    translate();
    updateUI();
    startAutoplay();
  }

  // Compat DOMContentLoaded + Turbo (si utilisé)
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousel);
  } else {
    initCarousel();
  }
  document.addEventListener('turbo:load', initCarousel); // si Symfony UX Turbo est actif
})();
</script>

